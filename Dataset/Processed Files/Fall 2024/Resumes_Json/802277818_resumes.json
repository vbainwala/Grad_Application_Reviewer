{
  "document_name": "Zhou, Junru (802277818).pdf",
  "total_pages": 2,
  "pages": [
    {
      "page_number": 1,
      "content": "Zhou, Junru; DOB: 01/17/2000; ID: 802277818\nJUNRU (JACK) ZHOU\n(831)-400-7889 ⋄ Irvine, CA 92614 ⋄ junruz6@uci.edu ⋄ https://www.linkedin.com/in/junru-zhou/\nEDUCATION\nUniversity of California, Irvine Irvine, CA\nM.S. in Computer Engineering, GPA: 3.40/4.00 Sept. 2022 - Present\nUniversity of California, Santa Cruz Santa Cruz, CA\nB.S. in Computer Engineering, Minor in Computer Science, GPA: 3.31/4.00 Sept. 2019 - Jun. 2022\nSKILLS\nProgramming languages Python, Java, C, C++, C#, SQL, HTML, JavaScript, CSS, SystemC, MIPS ASM, Verilog\nTechnical Tools Linux, Git, NodeJS, React, Jupyter, PyTorch, TensorFlow, Scikit-learn, Pandas, Bash, WebGL\nSoftware VS Code, CCStudio, Bitvise SSH, FileZilla, MATLAB, Wireshark, QEMU, VirtualBox, LaTex\nEXPERIENCE\nWinservo Electrical Technology Co., Ltd. Xiamen, Fujian, China\nEmbedded Software Development Engineer Intern Jun. 2023 - Sept. 2023\n• Implemented advanced PID control algorithms to enhance servo motor tension control, replacing outdated linear algorithms\n• Utilized CSStudio for debugging, and optimizing the existing codebase, resulting in improved performance and reliability\n• Collaborated with electrical and mechanical engineers to adjust the control algorithm, ensuring the change fit with the system\n• Improved the real-time response of the servo motors, resulting in increased production efficiency and product quality\n• Documented the development process and provided reports to assist in knowledge transfer within the development group\nCE Grow Force Technology Co., Ltd. Remote\nSoftware Development Engineer Intern Jul. 2022 - Sept. 2022\n• Designed a new platform facilitating documents and installation packages, aimed to improve user resource accessibility\n• Implemented data uploading strategies by integrating the Alibaba cloud storage solution to guarantee easy access to resources\n• Applied elastic search algorithms to allow users to search through the database for desired documentations and packages\n• Developed user-friendly download pages in HTML and JavaScript offering in-depth information on downloadable content\n• Enhanced page layout by incorporated a navigation bar to provide file type categorization with version selection tables\nUniversity of California, Santa Cruz Santa Cruz, CA\nUndergraduate Student Researcher Jul. 2021 - Jan. 2022\n• Developed a Vision-RFID fusion system to achieve real-time identification of individuals’ physical IDs within the camera field\nof view, and implemented a tracking algorithms to monitor targets and capture their movement patterns in video frames\n• Implemented a C# program with Low-level Reader Protocol and Kinect to deploy RFID reader and data collection system\n• Created a Python-based RNN model using a LSTM network for binary time series classification to process physical data\n• UtilizedPyTorchtotrainandassessadeeplearningmodelwiththeSiameseOSNetforaccuratepersondetectionandtracking\n• Performed data collection and analysis to validate the RFID tag detection and movement tracking capabilities of the model\nPROJECTS\nLong Marine Lab Stranding Map\n• Collaborated in the implementation of a database visualization map project for geospatial data on stranded marine life cases\n• Developed front-end layouts using JavaScript with React, leveraging Mapbox GL for mapping functionalities, and utilized\nNode.js on the backend for efficient data management and utilized Firebase and Algolia for database indexing and retrieval\n• Contributed to the existing codebase by resolving bugs and optimizing database management through peer code review\n• CollaboratedwithteammembersbyJiraforefficienttaskmanagementandGitHubforcodecollaborationandversioncontrol\nThe BreakAlert\n• Developed a productivity-enhancing Google Chrome extension to empower users through a range of useful add-on tools\n• Utilized HTML and JavaScript skills to architect fully functional extension pages that integrated a scheduler, calendar GUI,\ntab shortcut, to-do list, alarm, and website blocker, fostering heightened productivity and concentration\n• Crafted a HTML landing page that showcased the extension’s capabilities, and introducing users to its features and benefits\n• Led a team of four developers to adopt Scrum methodologies, facilitating efficient collaboration and on-time project delivery\nFirst-Person 3D World Exploration\n• Developed a 3D scene application using Three.js, incorporating several 3D primary shapes, including cubes, spheres, and\ncylinders, with one textured and animated 3D object to create a visually engaging and dynamic world on website\n• Implemented light sources including Ambient Light, Directional Light, and Point Light, to enhance the visual appeal\n• Integrated a textured skybox using a cubemap, creating a captivating background that enhances the immersive experience\n• Configured the camera with incorporated Orbit Controls to allow users to navigate the scene with mouse interactions\n• Incorporatedadvancedfeatures,includingFogforheighteneddepthperception,RendertoTexturefordynamicrendering,and\nShadows for enhanced realism and visual impact, successfully achieving an elevated level of visual effect\n10/07/2024 09:57 Resume 1/2",
      "metadata": {
        "width": 612,
        "height": 792
      }
    },
    {
      "page_number": 2,
      "content": "Zhou, Junru; DOB: 01/17/2000; ID: 802277818\nBitcoin Price Prediction\n• Developed an autoregressive RNN model for Bitcoin price prediction using Python by utilized historical Bitcoin price data\n• Imported the data using Pandas and processed it with Numpy to a chronological distribution training and test sets\n• Explored and tested data using various RNN architectures, including LSTM and GRU, both unidirectional and bidirectional\n• Evaluated models using MSE to plotted training, validation loss, and select the best-performing model based on evaluation\n• Tuned model for accurate predictions and illustrated results by comparing predicted prices to actual prices through plots\nGesture Recognition and Classification\n• Built a custom CNN model for recognizing ASL hand gestures images corresponding to the English alphabet\n• Resized and preprocessed images to 200x200 pixels, adjusted pixel values, and meticulously categorized target classes\n• Adjusted the convolutional and dense layers, ReLU activation, batch normalization, and dropout to mitigate overfitting\n• Trained the model using Categorical Cross-Entropy loss, Adam optimizer, and implemented learning rate schedules\n• Performed hyperparameter tuning with a primary focus on optimizing learning rate, architecture depth, and dropout rate,\nfollowed by model selection based on validation performance and subsequent test accuracy computation\nVisualization Comparance of GAE and DANMF\n• VisualizedthecommunitydetectioninnetworksandcreatedrunnableprojectstoenhanceunderstandingofGAEandDANMF\n• UsedPythontoreadandprocessdatasetslikeCiteSeer,Cora,andPubMedtovalidateandtransformthemformodelutilization\n• Utilized TensorFlow to implement GAE models and Scikit-learn to implement DANMF models, extensively experimenting\nwith various encoder sizes and layer configurations to evaluate the model structure on performance across multiple datasets\n• Generatedmultipletablestoassessmodelrobustnessbyintroducingnoisetothedataandanalyzethedifferenceofperformance\n• Re-implementedtheoriginalPythoncodesonJupyterfortheplatform,enhancedfunctionalitythroughmodificationstopackage\nsources, dataset sources, and relevant codes, resulting in a streamlined user experience with one-click execution capability\nC2S Proxy Server\n• Designed a proxy server, enhancing its functionality to manage HTTP requests from clients through seamless conversion into\nHTTPS requests and implemented an access control list-based request filtering system to optimize network performance\n• Implementedinputvalidationfortheportnumberandconfigurationfilepaths,enhancingtheserver’srobustnessandreliability\n• Set up and managed multiple threads to handle concurrent client connections, ensuring efficient operation and responsiveness\n• Designed a resilient signal handler for command handling and site list updates, while also developing a secure data retrieval\nand transmission function using SSL encryption for client-server communication to ensure data integrity\n• Created error handling functions to provide error messages in response to unexpected issues, improving user experience\nThread Scheduling and Priority Management\n• Implemented a priority-based ready queue system for thread scheduling and prioritization in a multi-threaded environment\n• Developed a priority donation mechanism to effectively address situations in which high-priority threads required access to\nresources held by lower-priority threads, ensuring seamless priority transfers and the prevention of resource contention issues\n• Designed and integrated advanced priority management functionalities, encompassing multi-tier, nested, and linked priority\ncontributions, ensuring meticulous documentation of donation data to optimize thread scheduling efficiency\n• Enhanced thread system responsiveness and efficiency by prioritizing high-priority threads for improved task execution\nSystem Calls and Process Management\n• Designed and implemented a comprehensive system call handler, featuring an array of essential functions for system calls,\nincluding create, open, read, filesize, wait, close, and exec, aimed at improving the system’s overall functionality and efficiency\n• Developedarobuststackmanagementsystemtointelligentlyparseruntimeparametersandefficientlystorethem,guaranteeing\nprecise handling of critical base addresses, string lengths, word alignment, and various other essential parameters\n• Developed a stack-based approach to manage the storage of parameters in order to ensure the execution of system calls\n• Resolved potential parent-child process order issues by implementing a thread-sync mechanism, preventing test case failures\n• Implementeddatastructuresandlistsforthesystemtotrackfileopenings,managefiledescriptors,andsupportfileoperations\nCanny Edge Detector\n• Developed an efficient SLDL model with a focus on utilizing the Canny Edge Detector, SystemC compiler integration, and\nprecise parameter management, while assessing the computational load for DUT components as a percentage of the total load\n• Used the gprof tool for SystemC to identify the computational complexity and calculate the relative loads of components\n• Implemented fixed-point arithmetic optimizations for a specific component, converting floating-point variables to integers and\nadjusting timing based on the trade-off between execution speed and image quality assessed with ImageDiff tool\n• Conducted performance testing on Raspberry Pi 3 and 4 to find the improvement and adjusted model timing accordingly\nLANGUAGES\nChinese - Native, English - Proficient, Japanese - Basic\n10/07/2024 09:57 Resume 2/2",
      "metadata": {
        "width": 612,
        "height": 792
      }
    }
  ]
}